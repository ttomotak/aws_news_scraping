AWSTemplateFormatVersion: 2010-09-09
Description: Hands-on template for EC2

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  EC2AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  WEBLocation:
    Description: The IP address range that can be use
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
# ------------------------------------------------------------#
# WebAS
# ------------------------------------------------------------#
  WebAS:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AvailabilityZones:
        - !ImportValue handson-PublicSubnet1AZ
        - !ImportValue handson-PublicSubnet2AZ
      VPCZoneIdentifier: 
        - !ImportValue handson-PublicSubnet1
        - !ImportValue handson-PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      AutoScalingGroupName: as-gr-dev-aws-tomo-AS
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: dev-web01-tomo-AS
# ------------------------------------------------------------#
# ALB
# ------------------------------------------------------------#
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !ImportValue handson-s3-BucketName
        - Key: access_logs.s3.prefix
          Value: !Sub 'alb/${AWS::StackName}'
      Subnets: 
        - !ImportValue handson-PublicSubnet1
        - !ImportValue handson-PublicSubnet2
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: dev-alb-web01
# ------------------------------------------------------------#
# ALB etc
# ------------------------------------------------------------#  
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !ImportValue handson-VPCID
# ------------------------------------------------------------#
# Launch Configuration
# ------------------------------------------------------------#
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      LaunchConfigurationName: as-ls-dev-aws-tomo-AS
# ------------------------------------------------------------#
# EC2 SecurityGroup
# ------------------------------------------------------------#
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref WEBLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref WEBLocation
      VpcId: !ImportValue handson-VPCID








AWSTemplateFormatVersion: 2010-09-09
Description: Hands-on template for S3

Mappings:
  S3Config:
    us-east-1:
      BucketPrincipal: "127311923021"
    us-east-2:
      BucketPrincipal: "033677994240"
    us-west-1:
      BucketPrincipal: "027434742980"
    us-west-2:
      BucketPrincipal: "797873946194"
    ap-northeast-1:
      BucketPrincipal: "582318560864"
    cn-north-1:
      BucketPrincipal: "638102146993"

Resources:
# ------------------------------------------------------------#
# S3
# ------------------------------------------------------------#
  LogS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'dev-46000-02'
# ------------------------------------------------------------#
# S3 policy
# ------------------------------------------------------------#
  BucketPolicyELBLogBucket:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LogS3
      PolicyDocument:
        Statement:
          - 
            Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${LogS3}/*"
            Principal:
              AWS: !FindInMap [ S3Config, !Ref "AWS::Region", BucketPrincipal ]
# ------------------------------------------------------------#
# Output
# ------------------------------------------------------------#
Outputs:
  ELBLogBucketName:
    Value: !Ref LogS3
    Export:
      Name: !Sub ${AWS::StackName}-BucketName
  ELBLogBucketPrefix:
    Value: !Sub "AWSLogs/${AWS::AccountId}/*"
    Export:
      Name: !Sub ${AWS::StackName}-BucketPrefix











AWSTemplateFormatVersion: 2010-09-09
Description: Hands-on template for VPC

Resources:
  CFnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: handson-cfn

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1-tomo

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  CFnVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: handson-cfn

  CFnVPCIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref CFnVPCIGW
      VpcId: !Ref CFnVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFnVPC
      Tags:
        - Key: Name
          Value: Public Route

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: CFnVPCIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CFnVPCIGW

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

Outputs:
  VPCID:
    Description: VPC ID
    Value: !Ref CFnVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  PublicSubnet1:
    Description: PublicSubnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: PublicSubnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
  
  PublicSubnet1AZ:
    Description: Public Subnets1 AZ
    Value: !GetAtt PublicSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1AZ

  PublicSubnet2AZ:
    Description: Public Subnets2 AZ
    Value: !GetAtt PublicSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2AZ



