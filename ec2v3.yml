AWSTemplateFormatVersion: 2010-09-09
Description: AS for EC2

Parameters:

  InstanceType:
    Type: String
    Default: t3.nano
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small

  EC2AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  Hostname:
    Type: String
    Default: webas

  WEBLocation:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'

  SSHLocation:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'

Resources:
# ------------------------------------------------------------#
# EC2 IAMRole
# ------------------------------------------------------------#
  EC2IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${Hostname}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: EC2IAMRole
      InstanceProfileName: !Sub "${Hostname}-profile"
# ------------------------------------------------------------#
# S3
# ------------------------------------------------------------#
  LogS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'logs3-${Hostname}-${AWS::Region}-${AWS::AccountId}'
# ------------------------------------------------------------#
# WebAS
# ------------------------------------------------------------#
  WebAS:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Select [ 0, !GetAZs ]
        - !Select [ 1, !GetAZs ]
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref LaunchConfig
      AutoScalingGroupName: !Sub "${Hostname}"
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub "${Hostname}"
# ------------------------------------------------------------#
# Launch Configuration
# ------------------------------------------------------------#
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMI
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      LaunchConfigurationName: !Sub "${Hostname}"
      UserData:
        Fn::Base64: !Sub
          -
            |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install -y php7.2
            yum install -y httpd
            systemctl start httpd && systemctl enable httpd
            usermod -a -G apache ec2-user && chown -R ec2-user:apache /var/www && chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;
            echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
            wget -O- "https://toolbelt.treasuredata.com/sh/install-amazon2-td-agent4.sh" | sh -
            chmod +x /var/log/httpd
            chmod +r /var/log/httpd/access_log
            echo "<source>" > /etc/td-agent/td-agent.conf
            echo "  @type tail">> /etc/td-agent/td-agent.conf
            echo "  path /var/log/httpd/access_log">> /etc/td-agent/td-agent.conf
            echo "  pos_file /var/log/td-agent/httpd.access_log.pos">> /etc/td-agent/td-agent.conf
            echo "  <parse>">> /etc/td-agent/td-agent.conf
            echo "    @type apache2">> /etc/td-agent/td-agent.conf
            echo "  </parse>">> /etc/td-agent/td-agent.conf
            echo "  tag s3.apache.access">> /etc/td-agent/td-agent.conf
            echo "</source>">> /etc/td-agent/td-agent.conf
            echo "<match s3.*.*>">> /etc/td-agent/td-agent.conf
            echo "  @type s3">> /etc/td-agent/td-agent.conf
            echo "  s3_bucket ${S3name}">> /etc/td-agent/td-agent.conf
            echo "  path logs/">> /etc/td-agent/td-agent.conf
            echo "  <format>">> /etc/td-agent/td-agent.conf
            echo "    @type ltsv">> /etc/td-agent/td-agent.conf
            echo "  </format>">> /etc/td-agent/td-agent.conf
            echo "  <buffer>">> /etc/td-agent/td-agent.conf
            echo "    @type file">> /etc/td-agent/td-agent.conf
            echo "    path /var/log/td-agent/s3">> /etc/td-agent/td-agent.conf
            echo "    flush_mode interval">> /etc/td-agent/td-agent.conf
            echo "    flush_interval 30s">> /etc/td-agent/td-agent.conf
            echo "  </buffer>">> /etc/td-agent/td-agent.conf
            echo "  time_slice_format %Y%m%d%H">> /etc/td-agent/td-agent.conf
            echo "</match>">> /etc/td-agent/td-agent.conf
            systemctl start td-agent && systemctl enable td-agent
            td-agent --version > /tmp/td-agent-install.log
          - {
              S3name: !Sub 'logs3-${Hostname}-${AWS::Region}-${AWS::AccountId}'
            }

# ------------------------------------------------------------#
# EC2 SecurityGroup
# ------------------------------------------------------------#
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref WEBLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      VpcId: !Ref CFnVPC
# ------------------------------------------------------------#
# VPC
# ------------------------------------------------------------#
  CFnVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CFnVPC
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref CFnVPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet2

  CFnVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: cfn

  CFnVPCIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CFnVPCIGW
      VpcId: !Ref CFnVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFnVPC
      Tags:
        - Key: Name
          Value: Public Route

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CFnVPCIGW

  Subnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
