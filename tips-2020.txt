# viエディタ
・日本語に変換する
edit ++encoding=sjis
・改行コードを表示する
se list

# classファイルの中身を見る
javap -c (classファイル名)

#awkメモ
・合計値を求める
| awk '{s += $1} END {print s}'

#ディスク使用率
・用語
RSS: 物理メモリ
・ランキング
ps -eo comm,rss | sort -rn -k 2 | head -n 50
・指定プロセス数
ps -eo rss,comm | awk 'BEGIN {COUNT=0} {if ($2 == "[プロセス名]"){ COUNT+=1 }} END {print COUNT}'
・指定プロセスのRSS合計
ps -eo rss,comm | awk 'BEGIN {SUM=0} {if ($2 == "[プロセス名]"){ SUM+=$1 }} END {printf("%dMB\n", SUM/1024)}'
・指定プロセスのRSS平均
ps -eo rss,comm | awk 'BEGIN {SUM=0;COUNT=0} {if ($2 == "[プロセス名]"){ SUM+=$1;COUNT+=1 }} END {printf("%dKB\n", SUM/COUNT)}'
・指定プロセスのRSS最大
ps -eo rss,comm | awk 'BEGIN {MAX=0} {if ($2 == "[プロセス名]"){ if (MAX < $1) { MAX=$1 }}} END {print MAX}'
・指定プロセスのCPU使用率
ps -eo %cpu,comm | awk 'BEGIN {SUM=0} {if ($2 == "[プロセス名]"){ SUM+=$1 }} END {print SUM}'
・du実測値
duはls -lとブロックサイズが異なる
du -skh *

・デバイスの設定と制御(一覧)
losetup
losetup -a

#diff
diff -uNrp

#sleep処理の入れ方
・cat instance_id.txt | xargs -I % sh -c '{ echo %; sleep 1; }'

#journald
・tomcatプロセスのログを見る
journalctl -u tomcat

#バックアップ
cp -p (ファイル名){,.old}

#ポート
https://atomitech.jp/study/entry-590/
perl -mIO::Socket::INET -le 'print IO::Socket::INET->new(PeerAddr=>shift,PeerPort=>shift,Proto=>shift,Timeout=>5)?"open":"close"' HOST PORT [PROTO]

#sed
sed -i -e "s/置換前/置換後/g" ファイル名

#ディスク使用(TOP 50)
ls -l | grep ^d | grep -v proc | awk '{print $9}' | xargs -i du -h --max-depth=5 {} | sort -rh | head -n 50

#メモリ使用(TOP 50)
ps aux | sort -n -k 6 | tail -n 50

#yum関連
・履歴
yum history list 10
yum history list all
・グループ
yum grouplist

#logrotateステータス
cat /var/lib/logrotate/logrotate.status

#var配下のディレクトリ構成
http://www.7key.jp/computer/linux/directory.html#var_run
・/var/run（実行プロセス関連データ）
システムが起動した後の各種システム情報データが置かれるディレクトリ。pidが確認できる。


#更新日付
find ./ -newermt '2020/11/1' ! -newermt '2020/11/30'
・日付でソート
find ./ -newermt '2020/11/1' ! -newermt '2020/11/30' \
| xargs -i ls -l {} | grep Nov \
| awk '{printf "%10s %10s %10s %10s %10s %10s %10s %10s %10s %10s\n", $1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' \
| sort -n -k 7
★難点: 2015~2019年のものが混じる。awkで整形可能

#confファイル閲覧用
cat /etc/zabbix/zabbix_agentd.conf | grep -vE "#" | sed '/^$/d'

#ssh鍵作成
CREATE_USER=test
COM_USER=test2

useradd $CREATE_USER
su - $CREATE_USER -c 'ssh-keygen -b 2048 -C $CREATE_USER@HOSTNAME-key-`date '+%Y%m%d'`'
mv /home/$CREATE_USER/.ssh/id_rsa.pub /home/$CREATE_USER/.ssh/authorized_keys
cp -p /home/$CREATE_USER/.ssh/id_rsa /tmp/$CREATE_USER@HOSTNAME-key-`date '+%Y%m%d'`
cat /home/$COM_USER/.ssh/id_rsa > /home/$CREATE_USER/.ssh/id_rsa

#systemctl
systemctl list-unit-files --no-pager

#syslog-ngをフォアグランドで起動して、エラーログを確認
/usr/sbin/syslog-ng -F -p /var/run/syslogd.pid



---------(mysql)---------

・ユーザ表示
SELECT Host, User, Password FROM mysql.user;
・権限表示
SHOW GRANTS FOR 'xxx_user'@'%';


---------(aws)---------

#CloudWatch カスタムメトリクスのインスタンスID一覧
aws cloudwatch list-metrics --namespace System/P2J | grep -E "i-" | sort -rn | uniq

#CloudTrail
Event name : GetDashboard

#コマンド補完
echo "complete -C '/usr/local/bin/aws_completer' aws" >> ~/bashrc
source ~/.bashrc

#CloudFront用
aws cloudfront list-distributions --query "DistributionList.Item[?Id==\`(IDを記載)\`]" | jq -r '.[] | .Id'
aws cloudfront list-distributions --query "DistributionList.Item[?Id==\`(IDを記載)\`]" | jq -r '.[] | .ARN'
aws cloudfront list-distributions --query "DistributionList.Item[?Id==\`(IDを記載)\`]" | jq -r '.[] | .WebACLId' \
| xargs -i aws waf get-web-acl --web-acl-id {}

#jq
| jq -r '["A","B","C"],(.a[] | [.b, .c] ) | @tsv' \
| column -t
#jq(日本語)
| jq -r '["あ","い","う"],(.a[] | [.b, .c] ) | @csv' \
| iconv -t sjis

---------(etc)---------
#Windowsメモ
・文字検索
findstr /C:"Nov  9 17:" (ファイル名)
・head
Get-Content "(ログファイル名)" | Select-Object -first 100
・tail
Get-Content "(ログファイル名)" | Select-Object -last 100
・1行目を削る
For /F "usebackq skip=1 tokens=*" %i In ( `Type (ログファイル名1)` ) Do Echo %i >> (ログファイル名2)
★usebackqで実行結果をファイルに出力

#図の数式
=SUMIFS(集計列、期間列、＞＝、開始日付、期間列、＜＝、終了日付）

=SUMIFS(B:B,A:A,">="&D3,A:A,"<="&E3)

# 文章メモ
・質問: 経緯、意図、前提、質問
・依頼: 経緯、依頼、背景、補足
・報告: 経緯、補足、次のアクション
・相談: 経緯、相談事項１、相談事項２、補足、次のアクション

# VM関連
https://qiita.com/BooookStore/items/653171a338163058670e

#構成
192.168.50.1 : host
↓
192.168.50.2 : target

# vagrantのコマンド一覧
vagrant ssh ansible-host-node
vagrant ssh ansible-controll-node
vagrant global-status　一覧
 vagrant global-status --prune　キャッシュを消して、一覧
vagrant destroy id番号
vagrant up　起動
vagrant halt　停止

★vagrantはコードでサクッと複数台用意できる。

# docker
docker run -it --name NAME IMAGE bash
docker search 
docker pull
docker image list
docker run -itd --name target -h target 688353a31fde
docker run -itd --name controller -h controller 688353a31fde
docker ps -a
docker exec -it target /bin/bash
docker restart target controller 
hostname -i
yum -y install initscripts MAKEDEV
yum -y install openssh-server

★-dはバックグラウンド。-dがないとexitするとコンテナも停止する。
★ctlr ＋ p (rocess) ＋  q  (uit)

# ssh鍵をクライアントへ送り込み
docker cp $CONTAINER_ID:/root/.ssh/id_rsa $CONTAINER_ID
systemctl enable sshd
